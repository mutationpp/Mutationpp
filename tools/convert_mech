#!/usr/bin/env python

import sys
import getopt

class Reaction:
    def __init__(self, formula, constants, thirdbodies = None):
        self.formula = formula
        self.constants = constants
        
        if thirdbodies is None:
            self.thirdbodies = []
        else:
            self.thirdbodies = []
            for thirdbody in thirdbodies:
                self.thirdbodies.append(
                    (thirdbody.replace("p","+").replace("m","-"), 1.0))
    

def loadMechanism(filename):
    # First open the file and read in every line
    with open(filename) as f:
        lines = f.readlines()
    
    thirdbody = False
    reactions = []    
    
    for line in lines:        
        if not thirdbody:
            tokens = line.split(":")
            formula = tokens[0].strip().replace("p","+").replace("m","-").replace(" ","")
            constants = tokens[1].rstrip("\n").replace(" ","").split("/")
            
            if "M" in formula:
                thirdbody = True
            else:
                reactions.append(Reaction(formula, constants))
        else:
            thirdbodies = line.lstrip("M= ").rstrip("\n").split(",")
            reactions.append(Reaction(formula, constants, thirdbodies))
            thirdbody = False
     
    return reactions


def merge(reactions):
    # First find the reaction rate belonging to the reaction with the most
    # default thirdbodies
    most_tbs = 0
    for reaction in reactions:
        if len(reaction.thirdbodies) > most_tbs:
            most_tbs = len(reaction.thirdbodies)
            A = reaction.constants[0]
    
    # Next create a reaction that is the sum of all the reactions
    constants = []
    constants.extend(reactions[0].constants)
    constants[0] = A
    merged = Reaction(reactions[0].formula, constants)
    for reaction in reactions:
        for tb in reaction.thirdbodies:
            merged.thirdbodies.append(
                (tb[0].strip(), float(reaction.constants[0])/float(A)))    
    
    return merged


def mergeThirdBodyReactions(reactions):
    merged = []
    tomerge = []
    
    for reaction in reactions:
        if not "M" in reaction.formula:
            if tomerge:
                merged.append(merge(tomerge))
                tomerge = []
                
            merged.append(reaction)
        else:
            if not tomerge:
                tomerge.append(reaction)
            else:
                if tomerge[0].formula == reaction.formula:
                    tomerge.append(reaction)
                else:
                    merged.append(merge(tomerge))
                    tomerge = []
                    tomerge.append(reaction)
    
    return merged

def writeMechanism(name, reactions):
    tab = "    "
    
    with open(name+".xml", "w") as f:
        f.write("<mechanism name=\"" + name + "\">\n")
        f.write(tab + "\n")
        f.write(tab +
            "<arrhenius_units A=\"mol,cm,s,K\" E=\"kcal,mol,K\" />\n")
        f.write(tab + "\n")
        
        i = 1
        for reaction in reactions:
            f.write(tab + "<!-- " + str(i) + " -->\n")
            i = i + 1
            f.write(tab + "<reaction formula=\"" + reaction.formula + "\">\n")
            f.write(tab + tab + "<arrhenius A=\"" + reaction.constants[0] +
                "\" n=\""+reaction.constants[1] +
                "\" T=\""+reaction.constants[2] + "\" />\n")
            if reaction.thirdbodies:
                string = ""
                for tb in reaction.thirdbodies:
                    if not tb[1] == 1.0:
                        string = string + tb[0] + ":" + str(tb[1]) + ", "
                if string:
                    f.write(tab+tab+"<M>"+string[:len(string)-2]+"</M>\n")
            f.write(tab + "</reaction>\n\n")        
        
        f.write("</mechanism>\n")



def main(argv = None):
    # Parse command line arguments
    if argv is None:
        argv = sys.argv
    
    try:
        opts, args = getopt.getopt(argv[1:], "")
    except getopt.error, msg:
        print msg;
        return 1
    
    # Now load all of the reactions from the file
    reactions = loadMechanism(args[0])
    
    # Next reduce the thirdbody reactions that are identical
    merged = mergeThirdBodyReactions(reactions)
    
    # Finally write the mechanism to the new file format
    writeMechanism(args[0], merged)


# Begin execution here
if __name__ == "__main__":
    sys.exit(main())
    

